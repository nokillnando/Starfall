--@name MeshLoader Config
--@author [C17] Red Fox
--@shared
--@include sfex_meshloader_core.txt
require("sfex_meshloader_core.txt")

--[[

    Changelog:
    
V2.00
    HOLY MOTHER OF CHANGES, this thing is now core / config based, easier to maintain and update
    Support for VTF files, bypasses rendertarget limits, supports alpha based
    specular masks, but only for vtf files
    Still on beta, so beware
    Removed Mirrors, I dont think anyone really used these, if you did
    contact me, ill try to re-implement it
    
V1.98
    Fixed Flags, finally, never noticied it not actually working as intended

V1.97
    Minor lil thing, nothing really worth mentioning
    
V1.96
    Fixed a long standing bug where materials sometimes overlaped, example: bumpmap before basetexture, etc
    It was so simple, yet so stupid to not be noticiable
    
V1.95
    Better prints, progress bar for the owner
    
V1.9
    Big changes, now everything is done in the client instead of the server, dramatically
    upping the loading speed, might have issues, not fully tested
    
V1.83:
    Initial public beta release
    Changed a few things, added optional parameters and some explaining
    
 ######################################################################################   
    Original by Cheezus modded by [C17] Red Fox based on my own chip
    Still a W.I.P conversion
    Tip:

FOLLOW THE DAMN INSTRUCTIONS

Version check url:
https://github.com/nokillnando/Starfall/tree/main/mesh_loaders_new

A better understanding of the variables is just below

To use fully this chip you will need some modelling, texturing, source engine material and image editing knowledge, yes it is a pain
If not you could just use the basic features

If you want to know about material parameters go to Valve's wiki:
https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters

Specular doesnt work how you might think here(maybe?), and if you are using it and theres no reflections or its a little wierd,
its possible the map has no cubemaps or has issues with it

Sometimes when spawning, the cubemap might not load correctly, just give the chip a little nudge / change positions

Specular in source works as the following so mod your texture accordingly:

The whiter it is, the shinier it will be, the same way that the blacker, more rought it will be, which is the inverse of PBR, using metallic / roughness maps, is
as far as I am aware, impossible, you'll have to mix and play around with specular to have the desired effect. Or play with an inverse roughness and metallic texture.

Furthermore, if you want to use bumppmaps with specular mask, you'll have to use it as an alpha channel of the basetexture then add a special flag for it
Dont try to use a bumpmap with alpha channel, its not properly supported in gmod, if you try, your model will have its lighting fullbright

If you dont want a specular mask, basetexture and bumpmaps work together as they should

Otherwise perhaps try exporting parts that should be more shiny or not, separately, and adjust how much the cubemap affects them when loading the mesh

Now that this has been said, go scroll down

    Explaining of each possible config, not in order:
    
    mdl,----------------------------The actual mesh obj URL ~21.845 tris max per object (it multiplies by 3, which is about 65536 verts max), also MUST be triangulated, 
    beware of rendertarget limit as well, around ~20 by default, that means about ~20 meshes per time if using single texture, should be enough as long as you stay at the tris limit
    you can load multiple meshes per .obj, that way it may pass the tris limit, but individual meshes are limited still
    
    texture,------------------------The custom texture URL or in-game texture to mod
    UseModTexture, -----------------Use Modified texture or not example: models/debug/debugwhite but with custom shinyness and stuff else just loads an in-game material with no mods
    Material,-----------------------If previous false this will be used, normal material such as "models/shiny" with its own proprierties
    ColorAndAlpha,------------------Self explanatory, RGB Alpha, can be used for custom texture as well
    UseEnvMapSpecularReflections,---Enables specular reflections, if true or if false will disable all kinds of reflections, loading an in-game material (not texture) overrides this
    EnvMapShinyness,----------------How much the specular affects reflections, also works as a tint
    EnvMapLink,---------------------The mask texture itself, uses a URL
    BumpMapLink,--------------------The bumpmap URL
    UsePhong,-----------------------1 or 0, for the following look at valve wiki, they are mostly useful for when you dont use a mask
    InvertPhongMask,----------------Try playing with this
    PhongTint,----------------------exactly as name says
    PhongBoost,---------------------Only works with normalmap - Spec Boost
    PhongExp,-----------------------Spec Glossiness
    UseRimLight,--------------------1 or 0, works only with BaseMapAlphaPhongMask?
    RimLightBoost,------------------A value, see valve wiki, only works with having a normalmap
    RimLightExp,--------------------Same as above
    EnvMapContrast,-----------------Used with BaseMapAlphaEnvMask
    EnvMapSaturation,---------------Same as above, try fiddling with these
    PhongFresnelRange,--------------Try fiddling, works with BaseMapAlphaPhongMask on, only
    EnableHalfLambert---------------See valve wiki
    CubeMapTexture------------------Which material will the cubemap be based of?
    EnvMapFresnel-------------------Try fiddling with it
    UseIngameBumpMapp---------------Use in-game texture instead of a custom one
    BumpMapTexture------------------Self explanatory
    TextureScale--------------------Same as above, also sets bumpmap scale
    BaseMapAlphaPhongMask-----------Use the base texture alpha as the phong mask
    EnableBaseMapAlphaEnvMask-------Same as above but for EnvMask, use either of one, not both at the same time
    EnableNormalmapAlphaEnvMapMask--Same as the above, but instead will use from the NormalMap, might have issues related to Starfall itself, due to how RT works
    PhongAlbedoTint-----------------Try fiddling
    PhongExponentTexture------------Self explanatory, although im not really sure if it even works
    PhongAlbedoBoost----------------Try fiddling
    Flags = {}----------------------Material flag numbers, see valve wiki, the order affects it
    LowPolyTexture------------------Linear texture filtering, PS1 style
    Color2--------------------------Vector, think of it as a extra color brightness if needed
    SuppressEngineLighting----------Make it fullbright
    
    
        To use any of the following, EnvMapMask, BumpMap, you MUST enable the use of UseEnvMapSpecularReflections
    ALL of these must be used in some way or other, follow the example and read the notes.
    
    NOTE:
    
    If you dont want BumpMap / EnvMap textures, just remove the link
    
    IT WONT load all kinds of models, see the Mesh note in the function above as to why
    
    ALL TEXTURES must be in 1024x1024 for better optmization, its a limitation of the rendertarget of starfall it seens, no way to bypass that
    if your textures are loading with wrong uvs, thats most likely the cause. Blame them, not me.
    It should auto correct but in case it doesnt this is why.
    
    
    If you want to use a custom material, one with custom proprierties without loading an external texture, just load up a white texture such as models/debug/debugwhite
    and set the color manually if not just load a normal gmod texture, but beware that just loading a material will override
    all custom proprierties except color and alpha.
    
    
    If you use multiple meshes for some reason, then you'll have to use multiple mesh configs
        
    This is a powerful chip, one that not many will be able to use fully, it is meant to be a better alternative
    to Prop2Mesh, since that has limitations on textures and other things, such as only being able to
    use local files, which in turn ramps up AdvDupe2 file size, which in turn makes it load much
    slower than needed
    
    If the mesh doesnt load, try reloading again
    
    WARNING:
    
    Each custom texture uses a RenderTarget, which means the more custom textures you use, the more RTs it will use, which in turn
    will reach the RT limit sooner
    
    Mirrors EAT your fps, along other players, so its not really recommended to use, but its there if you want to
    
    Try to compact your model / textures in a manner that it will the less materials and meshes as possible
    
    Of course thats not always possible, in the end you could raise your own max rendertargets. But that doesnt mean other players will.
    Which in turn will make it so that they dont see the textures or model and then error for them or you
    
    ]]--
--############################################################################################################################################
--Actual things to change
local meshName = "Body - Main" --Just the chip name when finished
local globalScale = Vector(1) -- Scale all meshes added by this amount, or add a scale vector to individual meshes
local offsetPos = Vector(0, 0, 0) -- Offsets are relative to chip/base
local offsetAngle = Angle(0, 0, 0)
local meshSpawnDelay = 0.1 -- Delay in seconds between spawning each mesh, adjust as needed to avoid lag
local showMeshSpawnProgress = false -- Set to true to show progress in console

local debugPrints = false  -- Set to false to disable most console messages
local showProgressDisplay = true  -- Set to true to show 3D2D progress display, only useful for the owner, as other players cant see it
local progressDisplayType = "bar"  -- "bar" or "text" for the display style
local progressDisplayHeight = 35  -- Height above the chip
local AllowCheckVersion = true  -- Set to false to disable online version checking

-- scale parameters can be added optionally for individual meshes, can leave them out if they aren't used
local meshes = {
      {
            mdl = "url here",
            texture = "url here",
            BumpMapLink = "url here",
            ColorAndAlpha = Color(255, 255, 255, 255),
            EnvMapShinyness = Vector(0.015, 0.015, 0.015), --envmaptint
            PhongTint = Vector(0.5, 0.5, 0.5),
            PhongBoost = 1.5, --only works with normalmap - Spec Boost
            PhongExp = 64, --Spec Glossiness 
            RimLightBoost = 1.25,
            RimLightExp = 18,   
            Flags = {2048},   --be careful of the flags, the order matters as well as the type     
        
        },

  
}

--Default config values
local function getDefaultConfig()
    return {
        texture = "models/debug/debugwhite",
        Material = "",
        UseModTexture = true,
        CubeMapTexture = "models/shiny",
        ColorAndAlpha = Color(255, 255, 255, 255),
        UseEnvMapSpecularReflections = true,
        EnvMapShinyness = Vector(0.2, 0.2, 0.2),
        EnvMapFresnel = 1,
        EnvMapLink = "",
        BumpMapLink = "",
        UseIngameBumpMapp = false,
        BumpMapTexture = "phoenix_storms/mat/mat_phx_metallic",
        TextureScale = 1,
        BaseMapAlphaPhongMask = false,
        EnableBaseMapAlphaEnvMask = false,
        EnableNormalmapAlphaEnvMapMask = false,
        UsePhong = 1,
        InvertPhongMask = 0,
        PhongTint = Vector(1, 1, 1),
        PhongAlbedoTint = 1,
        PhongBoost = 1,
        PhongExp = 128,
        PhongExponentTexture = "",
        PhongAlbedoBoost = 512,
        UseRimLight = 1,
        RimLightBoost = 0.25,
        RimLightExp = 18,
        EnvMapContrast = 1,
        EnvMapSaturation = 1,
        PhongFresnelRange = Vector(0.25, 0.50, 1),
        EnableHalfLambert = false,
        Flags = {},
        LowPolyTexture = 0,
        Color2 = Vector(1, 1, 1),
        SuppressEngineLighting = false,
        scale = Vector(1,1,1)
    }
end

local function mergeConfig(userConfig)
    if not userConfig.mdl then
        error("MDL parameter is required")
    end
    
    local defaultConfig = getDefaultConfig()
    local finalConfig = table.copy(defaultConfig)
    
    -- Merge user config with defaults
    for k, v in pairs(userConfig) do
        finalConfig[k] = v
    end
    
    return finalConfig
end

-- Add mesh download status tracking
local downloadStatus = {
    total = #meshes,
    completed = 0,
    failed = {}
}

-- Progress tracking for UI display
local progressData = {
    downloading = false,
    building = false,
    spawning = false,
    downloadProgress = 0,
    buildProgress = 0,
    spawnProgress = 0,
    totalMeshes = #meshes,
    downloadedMeshes = 0,
    builtMeshes = 0,
    spawnedMeshes = 0,
    totalSpawnItems = 0,
    currentStage = "Idle"
}

-- Process the meshes table to add defaults
local function processMeshesTable(meshesTable)
    local processedMeshes = {}
    for i, meshConfig in ipairs(meshesTable) do
        processedMeshes[i] = mergeConfig(meshConfig)
    end
    return processedMeshes
end

meshes = processMeshesTable(meshes)

-- For colorful printing
local W, R, G = Color(255, 255, 255), Color(255, 0, 0), Color(0, 255, 0)

--############################################################################################################################################
-- Initialize the mesh loader
if CLIENT then
    if _G.MeshLoaderCore then
        _G.MeshLoaderCore.initClient({
            AllowCheckVersion = AllowCheckVersion,
            meshName = meshName,
            globalScale = globalScale,
            offsetPos = offsetPos,
            offsetAngle = offsetAngle,
            meshSpawnDelay = meshSpawnDelay,
            showMeshSpawnProgress = showMeshSpawnProgress,
            debugPrints = debugPrints,
            showProgressDisplay = showProgressDisplay,
            progressDisplayType = progressDisplayType,
            progressDisplayHeight = progressDisplayHeight,
            meshes = meshes,
            downloadStatus = downloadStatus,
            progressData = progressData,
            W = W, R = R, G = G
        })
    else
        print("Error: MeshLoaderCore not loaded. Make sure sfex_meshloader_core.txt is included.")
    end

    -- Network handlers for mesh sharing between clients
    net.receive("sendMeshToClient", function()
        local recipient = net.readEntity()
        local meshIndex = net.readInt(16)
        
        if meshes[meshIndex] and meshes[meshIndex].meshData then
            net.start("sendMeshData")
            net.writeInt(meshIndex, 16)
            net.writeStream(meshes[meshIndex].meshData)
            net.send(recipient)
            
            if debugPrints then print("Sending mesh ", meshIndex, " to ", recipient:getName()) end
        end
    end)

    net.receive("sendMeshData", function()
        local meshIndex = net.readInt(16)
        net.readStream(function(data)
            if meshes[meshIndex] and not meshes[meshIndex].meshData then
                meshes[meshIndex].meshData = data
                
                if debugPrints then print("Received mesh ", meshIndex, " from another client, size: ", math.round(#data / 1048576, 3) .. "mb") end
            end
        end)
    end)
    
else -- SERVER
    local clientMeshes = {}

    net.receive("reportMeshStatus", function(_, ply)
        local status = net.readTable()
        clientMeshes[ply] = status
    end)

    net.receive("requestMissingMeshes", function(_, ply)
        local missingIndices = net.readTable()
        for possibleSender, status in pairs(clientMeshes) do
            if possibleSender ~= ply and isValid(possibleSender) then
                for _, index in ipairs(missingIndices) do
                    if status.completed[index] then
                        net.start("sendMeshToClient")
                        net.writeEntity(ply)
                        net.writeInt(index, 16)
                        net.send(possibleSender)
                        
                        if debugPrints then print("Requested client ", possibleSender:getName(), " to send mesh ", index, " to ", ply:getName()) end
                        break
                    end
                end
            end
        end
    end)

    wire.adjustPorts({
        Base = "entity",
    })

    local base = wire.ports.Base

    net.receive("requestBase", function(_, ply)
        if not isValid(base) then return end
        net.start("sendBase")
        net.writeEntity(base)
        net.send(ply)
    end)

end

hook.add("removed", "stopStreams", function()
    if net.isStreaming() then
        net.cancelStream()
    end
end)